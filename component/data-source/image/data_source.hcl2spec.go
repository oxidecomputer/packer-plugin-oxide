// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package image

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	Host    *string `mapstructure:"host" cty:"host" hcl:"host"`
	Token   *string `mapstructure:"token" cty:"token" hcl:"token"`
	Name    *string `mapstructure:"name" cty:"name" hcl:"name"`
	Project *string `mapstructure:"project" cty:"project" hcl:"project"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"host":    &hcldec.AttrSpec{Name: "host", Type: cty.String, Required: false},
		"token":   &hcldec.AttrSpec{Name: "token", Type: cty.String, Required: false},
		"name":    &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"project": &hcldec.AttrSpec{Name: "project", Type: cty.String, Required: false},
	}
	return s
}

// FlatOutput is an auto-generated flat version of Output.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatOutput struct {
	ImageID *string `mapstructure:"image_id" cty:"image_id" hcl:"image_id"`
}

// FlatMapstructure returns a new FlatOutput.
// FlatOutput is an auto-generated flat version of Output.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Output) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatOutput)
}

// HCL2Spec returns the hcl spec of a Output.
// This spec is used by HCL to read the fields of Output.
// The decoded values from this spec will then be applied to a FlatOutput.
func (*FlatOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"image_id": &hcldec.AttrSpec{Name: "image_id", Type: cty.String, Required: false},
	}
	return s
}
